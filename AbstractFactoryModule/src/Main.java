public class Main {
    public static void main(String[] args) {
        /*
        该项目用于理解 抽象工厂模式
        该项目引用的例子中，有如下信息：
        产品类型：衣服，裤子，鞋子
        工厂类型：耐克工厂，李宁工厂
        在这里，会按如下思路进行演示：
        抽象工厂接口一个，其实现类两个：耐克工厂 和 李宁工厂，这里称为具体工厂
        抽象产品三个：衣服，裤子，鞋子，其具体产品可以是多样的
        第一步：创建出所有的抽象产品接口：
            AbstractProduct_1，AbstractProduct_2，AbstractProduct_3
            接口中的操作是所有产品都要有的，比如void sold()表示产品卖出，或者void wear()表示产品被穿戴
        第二步，创建所有具体产品：
            Clothes_1，Clothes_2，Pants_1，Pants_2，Shoes_1，Shoes_2
            每个产品都要根据其特征，完善接口中的操作，比如李宁鞋子的操作应该是：穿李宁鞋子
        第三步：创建抽象工厂
            抽象工厂的内容物很简单，就是创建所有抽象产品的方法，比如CreateShoes()或者CreateClothes()等等
            要记住，抽象工厂冲的方法数 与 抽象产品 要能一一对应
        第四步，创建具体工厂，创建具体的产品对象
             具体工厂的任务就是创建具体产品，每个工厂都要创建对应的产品，比如李宁工厂就要生产李宁的字符裤子鞋子
             具体工厂继承的是抽象工厂的Create方法，每个方法返回一个new的对象
        第五步，完成客户端代码
            客户端Client只知道有抽象工厂 和 抽象产品的存在，只关心抽象工厂、抽象产品的接口，不关心具体实现
            客户端部分有如下操作：
            通过工厂接口创建产品，但不关心产品的具体实现
            执行产品的业务逻辑
         */
    }
}